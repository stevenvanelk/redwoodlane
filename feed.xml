<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://redwoodlane.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://redwoodlane.net/" rel="alternate" type="text/html" /><updated>2025-08-17T22:44:53+00:00</updated><id>https://redwoodlane.net/feed.xml</id><title type="html">Redwood Lane</title><subtitle>Expert Salesforce consulting, specializing in automation, integration, and custom development.</subtitle><author><name>Steven Van Elk</name></author><entry><title type="html">Ask Better Questions: How to Get the Right Requirements</title><link href="https://redwoodlane.net/blog/salesforce-requirements-analysis/" rel="alternate" type="text/html" title="Ask Better Questions: How to Get the Right Requirements" /><published>2025-06-20T00:00:00+00:00</published><updated>2025-06-20T00:00:00+00:00</updated><id>https://redwoodlane.net/blog/salesforce-requirements-analysis</id><content type="html" xml:base="https://redwoodlane.net/blog/salesforce-requirements-analysis/"><![CDATA[<p>Early in my Salesforce career, I used to build exactly what was asked.</p>

<p>“Can you add a checkbox?”<br />
“Can you make a flow that assigns this to marketing?”<br />
“Can we just copy this old spreadsheet into Salesforce?”</p>

<p>And guess what? Half the time, what I built wasn’t actually what they needed.</p>

<p>These days, I ask a better question first:</p>
<blockquote>
  <p>“What’s the problem you’re trying to solve?”</p>
</blockquote>

<p>That question alone has changed my approach.</p>

<p>When a client asked for a “training completed” checkbox, it led to a conversation about tracking attendance across multiple sessions, logging instructor feedback, and showing a full training history — not something you can solve with a checkbox.</p>

<hr />

<h2 id="why-requirements-gathering-fails">Why Requirements Gathering Fails</h2>

<p>The biggest trap Salesforce admins and developers fall into is becoming “order takers.” It’s easy to capture what people <em>say</em> they want and miss what the business <em>actually</em> needs. When you only document requests, you risk:</p>
<ul>
  <li>Building features that don’t solve the root issue</li>
  <li>Wasting time re-working automation after rollout</li>
  <li>Creating clutter in Salesforce that confuses users</li>
</ul>

<p>A checkbox might work for one department, but what happens when another team needs reporting across sessions, managers want dashboards, and compliance requires audit tracking? Suddenly, that “simple checkbox” turns into three different projects.</p>

<hr />

<h2 id="the-shift-from-requests-to-needs">The Shift: From Requests to Needs</h2>

<p>The way out is asking better questions. Instead of writing down “add checkbox,” start uncovering the real requirement:</p>

<ul>
  <li><strong>Ask about the process, not just the feature</strong><br />
<em>“Walk me through what happens when training is completed today.”</em></li>
  <li><strong>Clarify the why</strong><br />
<em>“Why do you need to know if training is completed? Who uses that info?”</em></li>
  <li><strong>Surface the impact</strong><br />
<em>“What happens if we don’t track this correctly?”</em></li>
</ul>

<p>By focusing on context, you uncover needs that the business user may not have fully articulated.</p>

<hr />

<h2 id="techniques-for-asking-better-questions">Techniques for Asking Better Questions</h2>

<p>Here are three approaches I use when running requirements sessions:</p>

<ol>
  <li><strong>The “Five Whys”</strong><br />
Keep asking <em>why</em> until you uncover the root need. Example:
    <ul>
      <li>“Why do you need the checkbox?” → “To see if someone finished training.”</li>
      <li>“Why do you need to see that?” → “So managers know who’s certified.”</li>
      <li>“Why is that important?” → “Because compliance requires it.”</li>
    </ul>

    <p>By the third or fourth why, you’re already closer to the real business driver.</p>
  </li>
  <li>
    <p><strong>Scenario Walkthroughs</strong><br />
Instead of asking abstract questions, walk through a real example.<br />
<em>“Pretend I’m a new hire finishing training — what happens step by step?”</em><br />
These walkthroughs often reveal edge cases and exceptions that wouldn’t come up otherwise.</p>
  </li>
  <li><strong>Future-State Thinking</strong><br />
Ask how they’d like things to look ideally, without technical constraints.<br />
<em>“If you could wave a magic wand, how would you track training?”</em><br />
This helps surface aspirations that can shape a scalable design.</li>
</ol>

<hr />

<h2 id="validating-requirements-before-building">Validating Requirements Before Building</h2>

<p>Even after uncovering needs, don’t jump straight into Flow Builder. Validate what you heard by:</p>
<ul>
  <li>Summarizing the problem back to the user in plain language</li>
  <li>Sketching a simple diagram or mockup before development</li>
  <li>Confirming how success will be measured</li>
</ul>

<p>This not only prevents wasted development time, it builds trust with stakeholders who feel heard.</p>

<hr />

<h2 id="salesforce-in-practice">Salesforce in Practice</h2>

<p>Here’s a quick example.<br />
A manager once asked me for a “button to mass-assign leads.” After questions, I learned the real pain was inconsistent territory assignment rules. The solution wasn’t a button — it was refining lead assignment logic and automating the process with criteria-based assignment rules. The manager’s job got easier, the team stopped fighting over leads, and reporting became cleaner.</p>

<p>Salesforce gives us powerful tools (Flows, Apex, validation rules, custom objects, etc.), but those tools only shine when they’re applied to the <em>right</em> problem.</p>

<hr />

<h2 id="key-takeaways">Key Takeaways</h2>

<p><strong>Great admins and developers don’t just gather requirements — we uncover them.</strong></p>

<p>That means:</p>
<ul>
  <li>Listening for pain points, not just feature requests</li>
  <li>Digging into how users work, not just what they say</li>
  <li>Validating your understanding before writing a single line of automation</li>
</ul>

<p>Salesforce is powerful, but only when we solve the <em>right</em> problems. Better questions lead to better systems — and happier teams.</p>

<hr />

<p>👉 Next time someone asks you for a checkbox, flow, or button, pause before opening Setup. Ask the better question first.</p>]]></content><author><name>Steven Van Elk</name></author><category term="Salesforce" /><category term="Salesforce Administrator" /><category term="Salesforce Developer" /><category term="Salesforce Consulting" /><category term="Consulting" /><category term="CRM" /><summary type="html"><![CDATA[People ask for features, but what they really need is a solution. Here’s how we go beyond requests to uncover real business needs.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://redwoodlane.net/images/blog/requirements-interviewing.webp" /><media:content medium="image" url="https://redwoodlane.net/images/blog/requirements-interviewing.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Apex Try-Catch Blocks That Actually Help You Debug</title><link href="https://redwoodlane.net/blog/apex-error-handling-best-practices/" rel="alternate" type="text/html" title="Apex Try-Catch Blocks That Actually Help You Debug" /><published>2025-06-19T00:00:00+00:00</published><updated>2025-06-19T00:00:00+00:00</updated><id>https://redwoodlane.net/blog/apex-error-handling-best-practices</id><content type="html" xml:base="https://redwoodlane.net/blog/apex-error-handling-best-practices/"><![CDATA[<p>We’ve all seen it — an Apex class with a try-catch block that does… nothing.</p>

<p>```apex
try {
    // business logic
} catch (Exception e) {
    // 🙈 quietly fail
}</p>

<p>That kind of error handling makes troubleshooting a nightmare. If something breaks, you get no logs, no visibility, and no clue why.</p>

<p>Instead, here’s how we structure try-catch blocks to help us debug efficiently:</p>

<p>Log the error using System.debug(), or better yet, store it in a custom Error Log object with e.getMessage() and e.getStackTraceString()
Surface user-friendly messages only when appropriate — don’t expose internals in UI errors
Avoid overbroad exception types — catching everything hides root causes
And when possible, wrap risky logic in helper methods to isolate failures. If you’re logging email failures the same way you handle DML errors, it’s time to refactor.</p>

<p>Solid error handling turns surprises into signals — and lets you fix issues before your users even notice.</p>]]></content><author><name>Steven Van Elk</name></author><category term="Salesforce" /><category term="Salesforce Administrator" /><category term="Salesforce Developer" /><category term="Salesforce Consulting" /><category term="Consulting" /><category term="CRM" /><summary type="html"><![CDATA[Catching an error isn’t enough. Here’s how to write Apex try-catch blocks that give you real insight when something goes wrong.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://redwoodlane.net/images/blog/apex-error-handling.webp" /><media:content medium="image" url="https://redwoodlane.net/images/blog/apex-error-handling.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Why We Use Custom Metadata to Simplify Flows</title><link href="https://redwoodlane.net/blog/flows-with-custom-metadata/" rel="alternate" type="text/html" title="Why We Use Custom Metadata to Simplify Flows" /><published>2025-06-18T00:00:00+00:00</published><updated>2025-06-18T00:00:00+00:00</updated><id>https://redwoodlane.net/blog/flows-with-custom-metadata</id><content type="html" xml:base="https://redwoodlane.net/blog/flows-with-custom-metadata/"><![CDATA[<p>If you’ve ever had to update a flow because a picklist value changed or a rule shifted, you already know the pain of hardcoded logic.</p>

<p>One of our favorite ways to reduce that friction is using <strong>Custom Metadata Types</strong> to drive logic in flows. Instead of multiple decision elements tied to static values, we set up records in a metadata type that map inputs to outcomes — think categories, priorities, or assignment rules.</p>

<p>Then in the flow, we use a <strong>Get Records</strong> element to query the matching metadata and determine what to do next.</p>

<p>Benefits?</p>
<ul>
  <li>Admins can change behavior without modifying the flow</li>
  <li>Logic stays readable, reusable, and scalable</li>
  <li>No more chasing down every branch when something changes</li>
</ul>

<p>Metadata-driven automation doesn’t just simplify updates — it helps you <strong>build smarter, more resilient flows</strong> from the start.</p>]]></content><author><name>Steven Van Elk</name></author><category term="Salesforce" /><category term="Salesforce Administrator" /><category term="Salesforce Developer" /><category term="Salesforce Consulting" /><category term="Consulting" /><category term="CRM" /><summary type="html"><![CDATA[Hardcoding values into flows leads to frustration down the road. Here’s how Custom Metadata Types let us scale automation cleanly.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://redwoodlane.net/images/blog/flows-metadata-clean.webp" /><media:content medium="image" url="https://redwoodlane.net/images/blog/flows-metadata-clean.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Why We Still Love Lightning Record Pages</title><link href="https://redwoodlane.net/blog/lightning-record-pages-design/" rel="alternate" type="text/html" title="Why We Still Love Lightning Record Pages" /><published>2025-05-01T00:00:00+00:00</published><updated>2025-05-01T00:00:00+00:00</updated><id>https://redwoodlane.net/blog/lightning-record-pages-design</id><content type="html" xml:base="https://redwoodlane.net/blog/lightning-record-pages-design/"><![CDATA[<p>We get it—Flows and Apex get all the attention. But <strong>great Lightning Record Pages</strong> can change how your team works every single day.</p>

<p>Here’s what we focus on:</p>

<ul>
  <li><strong>Page layouts that match business flow</strong>, not object structure</li>
  <li><strong>Tabs and visibility rules</strong> that reduce cognitive overload</li>
  <li><strong>Highlights, quick actions, and contextual components</strong> that help people do the right thing faster</li>
</ul>

<p>If your team has to scroll, guess, or tab-hop, your page layout is slowing them down. Let’s fix that.</p>

<hr />]]></content><author><name>Steven Van Elk</name></author><category term="Salesforce" /><category term="Salesforce Administrator" /><category term="Salesforce Developer" /><category term="Salesforce Consulting" /><category term="Consulting" /><category term="CRM" /><summary type="html"><![CDATA[Sometimes the best improvements come from layout, not logic. Here’s how we design Lightning pages that keep users focused and productive.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://redwoodlane.net/images/blog/lightning-pages-love.webp" /><media:content medium="image" url="https://redwoodlane.net/images/blog/lightning-pages-love.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Your Salesforce Org Is Only as Good as Its Worst Flow</title><link href="https://redwoodlane.net/blog/flows-that-dont-fail/" rel="alternate" type="text/html" title="Your Salesforce Org Is Only as Good as Its Worst Flow" /><published>2025-02-06T00:00:00+00:00</published><updated>2025-02-06T00:00:00+00:00</updated><id>https://redwoodlane.net/blog/flows-that-dont-fail</id><content type="html" xml:base="https://redwoodlane.net/blog/flows-that-dont-fail/"><![CDATA[<p>One bad flow can tank user trust, block record saves, or misroute leads. We’ve seen it all.</p>

<p>At Redwood Lane, we approach Flow like infrastructure: <strong>built to last, safe to fail, easy to maintain.</strong></p>

<p>Our approach:</p>

<ul>
  <li><strong>We test with real-world data</strong>, not perfect-case scenarios.</li>
  <li><strong>We document branches and logic</strong>, so anyone can understand how it works.</li>
  <li><strong>We create reusable subflows</strong>, so changes don’t require a rebuild every time.</li>
</ul>

<p>Flow is powerful. But with power comes responsibility—and we take that seriously.</p>

<hr />]]></content><author><name>Steven Van Elk</name></author><category term="Salesforce" /><category term="Salesforce Administrator" /><category term="Salesforce Developer" /><category term="Salesforce Consulting" /><category term="Consulting" /><category term="CRM" /><summary type="html"><![CDATA[A single unstable automation can create ripple effects across your business. Here’s how we design flows that don’t fail under pressure.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://redwoodlane.net/images/blog/flow-stability.webp" /><media:content medium="image" url="https://redwoodlane.net/images/blog/flow-stability.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Best Time to Future-Proof Your Org Is Right Now</title><link href="https://redwoodlane.net/blog/future-proof-salesforce/" rel="alternate" type="text/html" title="The Best Time to Future-Proof Your Org Is Right Now" /><published>2024-10-25T00:00:00+00:00</published><updated>2024-10-25T00:00:00+00:00</updated><id>https://redwoodlane.net/blog/future-proof-salesforce</id><content type="html" xml:base="https://redwoodlane.net/blog/future-proof-salesforce/"><![CDATA[<p>If your Salesforce org only works for today, it’s already behind.</p>

<p>We help clients think a step ahead—not by building bloated systems, but by designing <strong>flexibility</strong> into the foundation.</p>

<p>Here’s how we future-proof an org:</p>

<ul>
  <li><strong>We modularize automation</strong>, so changes don’t ripple in unpredictable ways.</li>
  <li><strong>We document key decisions</strong>, so future teams understand the why—not just the what.</li>
  <li><strong>We train admins</strong>, so your team can evolve the system without outside help.</li>
</ul>

<p>The future is unpredictable. But with the right structure, your CRM can be ready for anything.</p>

<hr />]]></content><author><name>Steven Van Elk</name></author><category term="Salesforce" /><category term="Salesforce Administrator" /><category term="Salesforce Developer" /><category term="Salesforce Consulting" /><category term="Consulting" /><category term="CRM" /><summary type="html"><![CDATA[Tech changes. Teams grow. Priorities shift. Here’s how we help clients build Salesforce orgs that are ready for what’s next.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://redwoodlane.net/images/blog/future-proof-org.webp" /><media:content medium="image" url="https://redwoodlane.net/images/blog/future-proof-org.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">When a CRM Becomes a Strategic Advantage</title><link href="https://redwoodlane.net/blog/crm-strategic-advantage/" rel="alternate" type="text/html" title="When a CRM Becomes a Strategic Advantage" /><published>2024-07-10T00:00:00+00:00</published><updated>2024-07-10T00:00:00+00:00</updated><id>https://redwoodlane.net/blog/crm-strategic-advantage</id><content type="html" xml:base="https://redwoodlane.net/blog/crm-strategic-advantage/"><![CDATA[<p>There’s a difference between <em>having</em> Salesforce and <strong>leveraging</strong> Salesforce.</p>

<p>At Redwood Lane, we help organizations evolve from just “using the tool” to making their CRM a <strong>strategic advantage</strong>.</p>

<p>What does that look like?</p>

<ul>
  <li><strong>Leadership gets real-time insights</strong>, not just monthly reports.</li>
  <li><strong>Sales and service teams work in sync</strong>, without manual handoffs.</li>
  <li><strong>Processes evolve faster</strong>, because the system is built for change.</li>
</ul>

<p>Salesforce isn’t just a place to store data. It’s a platform for transformation. We’re here to help you use it that way.</p>

<hr />]]></content><author><name>Steven Van Elk</name></author><category term="Salesforce" /><category term="Salesforce Administrator" /><category term="Salesforce Developer" /><category term="Salesforce Consulting" /><category term="Consulting" /><category term="CRM" /><summary type="html"><![CDATA[Most companies treat Salesforce as a tool. The smart ones treat it as a strategy. Here’s what that shift looks like.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://redwoodlane.net/images/blog/crm-strategic-advantage.webp" /><media:content medium="image" url="https://redwoodlane.net/images/blog/crm-strategic-advantage.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Chasing Simplicity in Complex Systems</title><link href="https://redwoodlane.net/blog/simple-salesforce-design/" rel="alternate" type="text/html" title="Chasing Simplicity in Complex Systems" /><published>2024-04-17T00:00:00+00:00</published><updated>2024-04-17T00:00:00+00:00</updated><id>https://redwoodlane.net/blog/simple-salesforce-design</id><content type="html" xml:base="https://redwoodlane.net/blog/simple-salesforce-design/"><![CDATA[<p>Powerful systems don’t have to feel complicated.</p>

<p>In fact, the best Salesforce builds we’ve seen are the ones that feel <em>effortless</em>—even when the logic under the hood is sophisticated.</p>

<p>At Redwood Lane, we help teams simplify without sacrificing capability:</p>

<ul>
  <li><strong>We hide complexity behind automation and smart defaults.</strong></li>
  <li><strong>We design interfaces that focus attention, not overwhelm.</strong></li>
  <li><strong>We make sure every action feels purposeful, not puzzling.</strong></li>
</ul>

<p>Complexity is inevitable. Confusion is optional. We’re here to help you build powerful systems that feel simple.</p>

<hr />]]></content><author><name>Steven Van Elk</name></author><category term="Salesforce" /><category term="Salesforce Administrator" /><category term="Salesforce Developer" /><category term="Salesforce Consulting" /><category term="Consulting" /><category term="CRM" /><summary type="html"><![CDATA[Even advanced Salesforce orgs can feel intuitive—if you build with clarity in mind. Here’s how we help make the complex feel simple.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://redwoodlane.net/images/blog/simplicity-in-complexity.webp" /><media:content medium="image" url="https://redwoodlane.net/images/blog/simplicity-in-complexity.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Problem With One-Size-Fits-All CRM Advice</title><link href="https://redwoodlane.net/blog/one-size-crm-problems/" rel="alternate" type="text/html" title="The Problem With One-Size-Fits-All CRM Advice" /><published>2024-01-24T00:00:00+00:00</published><updated>2024-01-24T00:00:00+00:00</updated><id>https://redwoodlane.net/blog/one-size-crm-problems</id><content type="html" xml:base="https://redwoodlane.net/blog/one-size-crm-problems/"><![CDATA[<p>You can find endless Salesforce “best practices” online—but that doesn’t mean they’ll work for your org.</p>

<p>At Redwood Lane, we’ve learned that the <em>right</em> solution depends entirely on your team, your process, and your goals.</p>

<p>Here’s what we do instead of relying on one-size-fits-all advice:</p>

<ul>
  <li><strong>We ask more questions than we answer—at first.</strong></li>
  <li><strong>We study your data, usage patterns, and team behavior.</strong></li>
  <li><strong>We prototype solutions and test them with real users.</strong></li>
</ul>

<p>Smart consulting isn’t just about knowing the tools—it’s about knowing when <em>not</em> to use them. That’s where we come in.</p>

<hr />]]></content><author><name>Steven Van Elk</name></author><category term="Salesforce" /><category term="Salesforce Administrator" /><category term="Salesforce Developer" /><category term="Salesforce Consulting" /><category term="Consulting" /><category term="CRM" /><summary type="html"><![CDATA[Every Salesforce org is different. Here’s why we approach each client with fresh eyes—and zero assumptions.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://redwoodlane.net/images/blog/one-size-fits-all.webp" /><media:content medium="image" url="https://redwoodlane.net/images/blog/one-size-fits-all.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Don’t Automate Noise</title><link href="https://redwoodlane.net/blog/dont-automate-noise/" rel="alternate" type="text/html" title="Don’t Automate Noise" /><published>2023-10-30T00:00:00+00:00</published><updated>2023-10-30T00:00:00+00:00</updated><id>https://redwoodlane.net/blog/dont-automate-noise</id><content type="html" xml:base="https://redwoodlane.net/blog/dont-automate-noise/"><![CDATA[<p>We love automation. But we’ve also seen how <strong>bad automation can cause more problems than it solves</strong>.</p>

<p>At Redwood Lane, we focus on automating systems that are stable, repeatable, and worth the effort. Because automating noise? That just gets you noisy, faster.</p>

<p>Here’s how we evaluate what to automate:</p>

<ul>
  <li><strong>Is the process well-defined?</strong> If not, we map it before we build.</li>
  <li><strong>Is it frequent and time-consuming?</strong> That’s a great candidate.</li>
  <li><strong>Does it reduce risk or error?</strong> Then it’s not just convenient—it’s valuable.</li>
</ul>

<p>Automation should make things smoother—not louder. We’ll help you get there.</p>

<hr />]]></content><author><name>Steven Van Elk</name></author><category term="Salesforce" /><category term="Salesforce Administrator" /><category term="Salesforce Developer" /><category term="Salesforce Consulting" /><category term="Consulting" /><category term="CRM" /><summary type="html"><![CDATA[Automation can make you faster—or just amplify chaos. Here’s how we help teams automate the *right* things.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://redwoodlane.net/images/blog/automate-right-things.webp" /><media:content medium="image" url="https://redwoodlane.net/images/blog/automate-right-things.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>